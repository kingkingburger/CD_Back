# from multiprocessing import Pool
import threading
import time

import pymysql
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

category_list = [
    "310090050", "310090060", "310090999", "310110030", "310110010", "310240", "310230", "310260200", "310260100", "310260300",
    "310040090", "310040080", "310040070", "310040999", "310050010", "310050050", "310050030", "310050040", "310050999", "310150030",
    "310150010", "310150040", "310150070", "310150999", "310140020", "310140010", "310140030", "310140040", "310140999", "310160010",
    "310160060", "310160020", "310160999", "310130030", "310130080", "310130040", "310120030", "310120110", "310120020", "310070",
    "310060", "310100040", "310100020", "310100030", "310100060", "310100050", "310100999", "310180030", "310180060", "310180010",
    "310180999", "310250", "310080010", "310080050", "310080020", "310080040", "310080030", "310080999", "310190010", "310190020",
    "310190030", "310190999", "310200", "310220",  # 여성의류 310 하위 카테고리 64개

    "320080700", "320080800", "320080999", "320100100", "320100200", "320200", "320190", "320210200", "320210100", "320210300",
    "320040100", "320040200", "320040500", "320040400", "320040999", "320060", "320050", "320120100", "320120200", "320120300",
    "320120999", "320110100", "320110200", "320110600", "320110500", "320110999", "320130100", "320130200", "320130300", "320130999",
    "320090300", "320090200", "320090100", "320090700", "320090800", "320090999", "320140999", "320140100", "320140300", "320140400",
    "320140200", "320070100", "320070300", "320070200", "320070400", "320070999", "320150100", "320150200", "320150300", "320150999",
    "320160", "320180",  # 남성의류 320 하위 카테고리 52개

    "405100", "405300300", "405300100", "405300200", "405300999", "405200300", "405200400", "405200100", "405200200", "405200999",  # 신발 하위 카테고리 10개"""

    "430100400", "430100100", "430100200", "430100300", "430100500", "430100999", "430200100", "430200300", "430200200", "430200500",
    "430200400", "430200999", "430300100", "430300999",  # 430 가방 하위 카테고리 14개"""

    "420100999", "420100200", "420100100", "420200200", "420200100",
    "420200300", "420200400", "420200999",  # 시계/쥬얼리 420 하위 카테고리 8개"""

    "400060300", "400060100", "400060999", "400110100", "400110200", "400070100", "400070700", "400070200", "400070500", "400070999",
    "400120100", "400120200", "400130100", "400130200", "400080300", "400080200", "400140100", "400140200", "400090", "400999",  # 패션 악세서리 400 하위 카테고리 20개"""

    "600700001", "600700004", "600700005", "600700002", "600700003", "600700007", "600700999", "600400003", "600400002", "600400001",
    "600400005", "600400004", "600400999", "600500010", "600500006", "600500004", "600500002", "600500005", "600500999", "600100006",
    "600100001", "600100007", "600100005", "600100004", "600100999", "600600001", "600600002", "600600003", "600600005", "600600999",
    "600300003", "600300001", "600300004", "600300002", "600300005", "600300007", "600300006", "600300999", "600200005", "600200003",
    "600200004", "600200008", "600200007", "600200009", "600200012", "600200010",  # 디지털/가전 600 하위 카테고리 46개"""

    "700600300", "700600500", "700600400", "700600900", "700200004", "700200300", "700200200", "700200999", "700250400", "700250100",
    "700250200", "700250300", "700250900", "700110200", "700110100", "700350900", "700350100", "700350500", "700350300", "700350400",
    "700350600", "700350700", "700350950", "700500", "700400", "700150", "700700100", "700700200", "700700400", "700700300",
    "700700700", "700700600", "700650100", "700650200", "700650999", "700120200", "700120100", "700160", "700140", "700170",
    "700130200", "700130100", "700180", "700900300", "700900400", "700900100", "700900900", "700800300", "700800200", "700800100",
    "700800999", "700800500", "700800600", "700800700", "700950",  # 스포츠/레저 700 하위 카테고리 55개"""

    "750200100", "750200200", "750200300", "750200500", "750200600", "750200700", "750200400", "750200800", "750100100", "750100200",
    "750100300", "750100500", "750100600", "750100700", "750100400", "750100800", "750610100", "750610200", "750610300", "750610400",
    "750610500", "750800100", "750800200", "750810100", "750810300", "750810200", "750810999", "750910100", "750910200",  # 차량/오토바이 750 하위 카테고리 29개"""

    "910100004", "910100001", "910100003", "910100008", "910100002", "910100006", "910100007", "910200004", "910200001", "910200003",
    "910200002", "910200008", "910200006", "910200007", "910800004", "910800001", "910800003", "910800008", "910800002", "910800006", "910800007",  # 스타굿즈 910 하위 카테고리 21개"""

                 "930100", "930200", "930300", "930500", "930400",
    "930600", "930999",  # 키덜트 930 하위 카테고리 7개"""

    "990100", "990200", "990300",  # 예술/희귀/수집품 990 하위 카테고리 3개"""

    "920100", "920200100", "920200200", "920200300", "920200500",
    "920200400", "920200600", "920200999",  # 음반/악기 920 하위 카테고리 8개"""

    "900100011", "900100013", "900100012", "900100014", "900100004", "900100009", "900100010", "900100007", "900100006", "900100002",
    "900100008", "900100005", "900100999", "900500200", "900500100", "900220003", "900220002", "900220001", "900220008", "900220999",
    "900230002", "900230001", "900230003", "900230999", "900210002", "900210001", "900210004", "900210007", "900210005", "900210006",
    "900210003", "900210999",  # 도서/티켓/문구 910 하위 카테고리 32개"""

    "410100400", "410100100", "410100200", "410100300", "410100500", "410100600", "410100999", "410400700", "410400500", "410400600",
    "410400100", "410400300", "410400200", "410400400", "410400999", "410300300", "410300200", "410300600", "410300100", "410300500",
    "410300400", "410300999", "410600100", "410600200", "410600400", "410600300", "410600700", "410600500", "410600600", "410600999",
    "410500100", "410500200", "410500300", "410500999", "410700200", "410700100", "410700400", "410700300", "410700999", "410800400",
    "410800300", "410800100", "410800500", "410800200", "410800999", "410900", "410950100", "410950600", "410950200", "410950500",
    "410950400", "410950800", "410950300", "410950700", "410950999",  # 뷰티/미용 410 하위 카테고리 55개"""

                 "810200300", "810200100", "810200200", "810100200", "810100100", "810100400", "810100300",  # 가구/인테리어 810 하위 카테고리 7개"""

    "800400010", "800400020", "800400090", "800400050", "800400060", "800400030", "800400100", "800400120", "800400110", "800400040",
    "800400070", "800400080", "800400130", "800400999", "800100004", "800100001", "800100999", "800300002", "800300001", "800300003",
    "800300999", "800500100", "800500200", "800500300", "800500400", "800500500", "800500600", "800500999",  # 생활/가공식품 800 하위 카테고리 28개"""

    "500110006", "500110004", "500110002", "500110005", "500110003", "500110007", "500110008", "500110001", "500110009", "500111001",
    "500111004", "500111007", "500111005", "500111008", "500111009", "500111003", "500111010", "500111002", "500111006", "500111012",
    "500111011", "500111013", "500113001", "500113003", "500113005", "500113004", "500113006", "500113007", "500113008", "500113002",
    "500113010", "500113009", "500113011", "500116001", "500116002", "500116003", "500116005", "500116004", "500116006", "500119004",
    "500119002", "500119003", "500119007", "500119005", "500119009", "500119008", "500119006", "500119001", "500119010", "500117001",
    "500117003", "500117002", "500117004", "500117005", "500117007", "500117010", "500117006", "500117008", "500117011", "500117009",
    "500118006", "500118005", "500118001", "500118004", "500118002", "500118003", "500118007", "500118008", "500120003", "500120004",
    "500120006", "500120005", "500120007",  # 유아동/출산 500 하위 카테고리 73개"""

    "980100", "980200", "980400", "980500", "980990",  # 반려동물용품 980 하위 카테고리 5개"""

]  # 기타 999"""


def crawling(category_list):
    options = webdriver.ChromeOptions()
    options.add_argument('headless')

    driver = webdriver.Chrome(service=Service(
        ChromeDriverManager().install()), options=options)
    driver.implicitly_wait(30)

    productDataset = []

    for category_num in category_list:
        url = "https://m.bunjang.co.kr/categories/"+category_num
        print(url)

        driver.get(url)
        html = driver.page_source
        soup = BeautifulSoup(html, 'html.parser')

        category = list(soup.find_all('div', 'fgNMrc'))

        if (len(category) == 3):
            category[0] = category[0].text
            category[1] = category[1].text
            category[2] = category[2].text

        elif (len(category) == 2):
            category[0] = category[0].text
            category[1] = category[1].text
            category.append(category[1])

        elif (len(category) == 1):
            category[0] = category[0].text
            category.append(category[0])
            category.append(category[0])

        name = soup.find_all('div', 'gwleiO')
        price = soup.find_all('div', 'moVyh')
        prod_link = soup.find_all('a', 'iizKix')
        img_link = soup.find_all('div', 'eSpfym')

        i = 0
        for data in zip(name, price, prod_link, img_link):
            if i > 4:
                break
            data = list(data)
            data.extend(category)
            productDataset.append(data)
            i += 1

    connect = pymysql.connect(
        host='my-rds-indstance.cs4f6papfyio.ap-northeast-2.rds.amazonaws.com', user='admin', password='alsgh0217',
        db='silkload', charset='utf8mb4')
    cursor = connect.cursor()

    #초기화 과정은 db_reset()에서 진행

    for product in productDataset:
        name = str(product[0].text)
        price = str(product[1].text)
        prod_link = str('https://m.bunjang.co.kr'+product[2]['href'])
        img_link = str(product[3].find('img')['src'])

        firstCategory = product[-3]
        secondCategory = product[-2]
        thirdCategory = product[-1]
        
        site_name = "번개장터"
        insert = """insert into crawling
        (site_name, first, second, third, name, price, link, img_link)
        values ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')
        """ % (site_name, firstCategory, secondCategory, thirdCategory, connect.escape_string(name), price, prod_link, img_link)

        cursor.execute(insert)
    print("========== done =========")
    connect.commit()
    connect.close()


def db_reset():
    connect = pymysql.connect(
        host='my-rds-indstance.cs4f6papfyio.ap-northeast-2.rds.amazonaws.com', user='admin', password='alsgh0217',
        db='silkload', charset='utf8mb4')
    cursor = connect.cursor()

    delete = """delete from crawling"""
    cursor.execute(delete)

    alter = """alter table crawling auto_increment=1"""
    cursor.execute(alter)

    connect.commit()


if __name__ == '__main__':
    db_reset()

    threads = []
    start_time = time.time()

    for i in range(4):  # 스레드 4개 생성
        thread = threading.Thread(target=crawling, args=category_list[i])
        thread.start()
        threads.append(thread)

    for thread in threads:
        thread.join()
    crawling(category_list)

    print("실행 시간 : %s초" % (time.time() - start_time))

# schedule.every(24).hours.do(crawling)

# while True:
#     schedule.run_pending()
#     time.sleep(1)